//@ts-check
/*
  Copyright: (c) 2018-2020, Smart-Tech Controle e Automação
  GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)
*/

/*
    MID 0900
    [xxxxxxxxxx]    [xxx...xxx]     [xxx]       [[][][][][]]    [xx]        [xx]            [xxx]
    (10) 0-9        (19) 10-28      (3) 29-31   (n) 32-n        (2) n       (2) n           (3) n
    resultID        timeStamp       numberPID   dataFields      traceType   transducerType  unit

    [xxx]               [[][][][][]]        [xxxxx]         [0x00]          [xx]       
    (3) n               (n) n               (5) n           (1) n           (2) n      
    numberResolution    resolutionFields    numberTrace     NUL character   traceSample

    Data fields
    [xxxxx]         [xxx]       [xx]        [xxx]       [xxxx]          [xxx...xxx]
    (5) 0-4         (3) 5-7     (2) 8-9     (3) 10-12   (4) 13-16       (n) 17-n 
    parameterID     lenght      dataType    unit        stepNumber      dataValue

    Resolution fields
    [xxxxx]         [xxxxx]         [xxx]       [xx]            [xxx]        [xxx...xxx]
    (5) 0-4         (5) 5-9         (3) 10-12   (2) 13-14       (3) 15-17    (n) 18-n  
    firstIndex      lastIndex       length      dataType        unit         timeValue
*/
/*
    payload: {
        resultID: {number}
        timeStamp: {string}
        numberPID: {number}
        dataFields: {object}
        traceType: {number}
        transducerType: {number}
        unit: {number}
        numberResolution: {number}
        resolutionFields: {object}
        numberTrace: {number}
        traceSample: {string}
    }

    dataField: {
        parameterID: {number}
        lenght: {number}
        dataType: {number}
        unit: {number}
        stepNumber: {number}
        dataValue: {string}
    }

    resolutionField:{
        firstIndex: {number}
        lastIndex: {number}
        length: {number}
        dataType: {number}
        unit: {number}
        timeValue: {string}
    }
*/

const helpers = require("../helpers.js");
const padLeft = helpers.padLeft;
const padRight = helpers.padRight;
const testNul = helpers.testNul;
const processParser = helpers.processParser;
const processDataFields = helpers.processDataFields;
const processResolutionFields = helpers.processResolutionFields;

function parser(msg, opts, cb){
      
    let buffer = msg.payload;
    msg.payload = {};
 
    var position = {value: 0};
     
    switch(msg.revision){
        
        case 1: 
         
            processParser(msg, buffer, "resultID", "number", 10, position, cb) &&
            processParser(msg, buffer, "timeStamp", "string", 19, position, cb) &&
            processParser(msg, buffer, "numberPID", "number", 3, position, cb) &&
            processDataFields(msg, buffer, "fieldPID", msg.payload.numberPID, position, cb) &&
            processParser(msg, buffer, "traceType", "number", 2, position, cb) &&
            processParser(msg, buffer, "transducerType", "number", 2, position, cb) &&
            processParser(msg, buffer, "unit", "string", 3, position, cb) &&
            processParser(msg, buffer, "numberData", "number", 3, position, cb) &&
            processDataFields(msg, buffer, "fieldData", msg.payload.numberData, position, cb) &&
            processParser(msg, buffer, "numberResolution", "number", 3, position, cb) &&
            processResolutionFields(msg, buffer, "resolutionFields", msg.payload.numberResolution, position, cb) &&
            processParser(msg, buffer, "numberTrace", "number", 5, position, cb) &&
            testNul(msg, buffer, "char nul", position, cb) &&          
            processParser(msg, buffer, "traceSample", "string", 2, position, cb) &&
            cb(null, msg);

        break;
    }    
}

function serializer(msg, opts, cb){

    let info = msg.payload;
    let buf;

    switch(msg.revision){
      
        case 1: 

            //Calc alloc
            //Message Base (50)
            //fieldPID
            //fieldData (17 + length) x numberPID 
            //resolutionFields (18 + length) x numberResolution

            let size = 50;

            if(info.dataFields.length > 0){
                for(let x = 0; x < info.dataFields.length; x++){
                    size += info.dataFields[x].length;                    
                }
            }
            size += (17 * info.dataFields.length);

            if(info.resolutionFields.length > 0){
                for(let x = 0; x < info.resolutionFields.length; x++){
                    size += info.resolutionFields[x].length;
                }
            }
            size += (18 * info.resolutionFields.length);

            buf = Buffer.alloc(size);

            let pos = 0;

            buf.write(padLeft(info.resultID, 10), pos, "ascii");
            pos += 10;

            buf.write(padRight(info.timeStamp, 19, 10, " "), pos, "ascii");
            pos += 19;

            buf.write(padLeft(info.numberPID, 3), pos, "ascii");
            pos += 3;

            //info.dataFields
            if(info.numberPID > 0){
                for(let x = 0; x < info.numberPID; x++){
                   
                    buf.write(padLeft(info.dataFields[x].parameterID, 5), pos, "ascii");
                    pos += 5;

                    buf.write(padLeft(info.dataFields[x].length, 3), pos, "ascii");
                    pos += 3;

                    buf.write(padLeft(info.dataFields[x].dataType, 2), pos, "ascii");
                    pos += 2;

                    buf.write(padLeft(info.dataFields[x].unit, 3), pos, "ascii");
                    pos += 3;

                    buf.write(padLeft(info.dataFields[x].stepNumber, 4), pos, "ascii");
                    pos += 4;

                    buf.write(padRight(info.dataValue, info.dataFields[x].length, 10, " "), pos, "ascii");
                    pos += info.dataFields[x].length;            
                    
                }
            }

            buf.write(padLeft(info.traceType, 2), pos, "ascii");
            pos += 2;

            buf.write(padLeft(info.transducerType, 2), pos, "ascii");
            pos += 2;
            
            buf.write(padLeft(info.unit, 3), pos, "ascii");
            pos += 3;

            buf.write(padLeft(info.numberResolution, 3), pos, "ascii");
            pos += 3;


            






        break;

        }
    
    msg.payload = buf;

    cb(null, msg);
}

module.exports = {
    parser, 
    serializer
};